// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  initials        String?
  hashedPassword String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  favoriteIds    String[]   @db.ObjectId
  review         String?
  slug           String?
  accounts       Account[]
  reviews        Reviews[]
  comments       Comments[]
  dailymeals     Dailymeal[]
  weeklymeals    Weeklymeal[]
}


model Weeklymeal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  meal      String   // The dish for the day
  dayOfWeek String   // The day of the week (e.g., Monday, Tuesday, etc.)
  business  String?
  price     Float
  date      DateTime
  city      String
  
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  image             String?

  @@unique([provider, providerAccountId])
}

model Reviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  review    String
  email     String?
  slug      String?
  image     String
  name      String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
}

model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  email     String?
  slug      String?
  image     String
  name      String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
}
